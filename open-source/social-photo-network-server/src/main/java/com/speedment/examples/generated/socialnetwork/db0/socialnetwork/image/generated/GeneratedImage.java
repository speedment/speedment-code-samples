package com.speedment.examples.generated.socialnetwork.db0.socialnetwork.image.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.examples.generated.socialnetwork.db0.socialnetwork.image.Image;
import com.speedment.examples.generated.socialnetwork.db0.socialnetwork.user.User;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.LongForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;

/**
 * The generated base for the {@link
 * com.speedment.examples.generated.socialnetwork.db0.socialnetwork.image.Image}-interface
 * representing entities of the {@code image}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedImage {
    
    /**
     * This Field corresponds to the {@link Image} field that can be obtained
     * using the {@link Image#getId()} method.
     */
    LongField<Image, Long> ID = LongField.create(
        Identifier.ID,
        Image::getId,
        Image::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Image} field that can be obtained
     * using the {@link Image#getUploader()} method.
     */
    LongForeignKeyField<Image, Long, User> UPLOADER = LongForeignKeyField.create(
        Identifier.UPLOADER,
        Image::getUploader,
        Image::setUploader,
        User.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Image} field that can be obtained
     * using the {@link Image#getTitle()} method.
     */
    StringField<Image, String> TITLE = StringField.create(
        Identifier.TITLE,
        Image::getTitle,
        Image::setTitle,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Image} field that can be obtained
     * using the {@link Image#getDescription()} method.
     */
    StringField<Image, String> DESCRIPTION = StringField.create(
        Identifier.DESCRIPTION,
        Image::getDescription,
        Image::setDescription,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Image} field that can be obtained
     * using the {@link Image#getImgData()} method.
     */
    StringField<Image, String> IMG_DATA = StringField.create(
        Identifier.IMG_DATA,
        Image::getImgData,
        Image::setImgData,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Image} field that can be obtained
     * using the {@link Image#getUploaded()} method.
     */
    ComparableField<Image, Timestamp, Timestamp> UPLOADED = ComparableField.create(
        Identifier.UPLOADED,
        Image::getUploaded,
        Image::setUploaded,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Image. The id field corresponds to the database
     * column db0.socialnetwork.image.id.
     * 
     * @return the id of this Image
     */
    long getId();
    
    /**
     * Returns the uploader of this Image. The uploader field corresponds to the
     * database column db0.socialnetwork.image.uploader.
     * 
     * @return the uploader of this Image
     */
    long getUploader();
    
    /**
     * Returns the title of this Image. The title field corresponds to the
     * database column db0.socialnetwork.image.title.
     * 
     * @return the title of this Image
     */
    String getTitle();
    
    /**
     * Returns the description of this Image. The description field corresponds
     * to the database column db0.socialnetwork.image.description.
     * 
     * @return the description of this Image
     */
    String getDescription();
    
    /**
     * Returns the imgData of this Image. The imgData field corresponds to the
     * database column db0.socialnetwork.image.img_data.
     * 
     * @return the imgData of this Image
     */
    String getImgData();
    
    /**
     * Returns the uploaded of this Image. The uploaded field corresponds to the
     * database column db0.socialnetwork.image.uploaded.
     * 
     * @return the uploaded of this Image
     */
    Timestamp getUploaded();
    
    /**
     * Sets the id of this Image. The id field corresponds to the database
     * column db0.socialnetwork.image.id.
     * 
     * @param id to set of this Image
     * @return   this Image instance
     */
    Image setId(long id);
    
    /**
     * Sets the uploader of this Image. The uploader field corresponds to the
     * database column db0.socialnetwork.image.uploader.
     * 
     * @param uploader to set of this Image
     * @return         this Image instance
     */
    Image setUploader(long uploader);
    
    /**
     * Sets the title of this Image. The title field corresponds to the database
     * column db0.socialnetwork.image.title.
     * 
     * @param title to set of this Image
     * @return      this Image instance
     */
    Image setTitle(String title);
    
    /**
     * Sets the description of this Image. The description field corresponds to
     * the database column db0.socialnetwork.image.description.
     * 
     * @param description to set of this Image
     * @return            this Image instance
     */
    Image setDescription(String description);
    
    /**
     * Sets the imgData of this Image. The imgData field corresponds to the
     * database column db0.socialnetwork.image.img_data.
     * 
     * @param imgData to set of this Image
     * @return        this Image instance
     */
    Image setImgData(String imgData);
    
    /**
     * Sets the uploaded of this Image. The uploaded field corresponds to the
     * database column db0.socialnetwork.image.uploaded.
     * 
     * @param uploaded to set of this Image
     * @return         this Image instance
     */
    Image setUploaded(Timestamp uploaded);
    
    /**
     * Queries the specified manager for the referenced User. If no such User
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    User findUploader(Manager<User> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Image> {
        
        ID          ("id"),
        UPLOADER    ("uploader"),
        TITLE       ("title"),
        DESCRIPTION ("description"),
        IMG_DATA    ("img_data"),
        UPLOADED    ("uploaded");
        
        private final String columnId;
        private final TableIdentifier<Image> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "db0";
        }
        
        @Override
        public String getSchemaId() {
            return "socialnetwork";
        }
        
        @Override
        public String getTableId() {
            return "image";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Image> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}