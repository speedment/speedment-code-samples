package com.speedment.examples.generated.socialnetwork.db0.socialnetwork.image.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.examples.generated.socialnetwork.db0.socialnetwork.image.Image;
import com.speedment.examples.generated.socialnetwork.db0.socialnetwork.user.User;
import com.speedment.runtime.core.manager.Manager;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.speedment.examples.generated.socialnetwork.db0.socialnetwork.image.Image}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedImageImpl implements Image {
    
    private long id;
    private long uploader;
    private String title;
    private String description;
    private String imgData;
    private Timestamp uploaded;
    
    protected GeneratedImageImpl() {}
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public long getUploader() {
        return uploader;
    }
    
    @Override
    public String getTitle() {
        return title;
    }
    
    @Override
    public String getDescription() {
        return description;
    }
    
    @Override
    public String getImgData() {
        return imgData;
    }
    
    @Override
    public Timestamp getUploaded() {
        return uploaded;
    }
    
    @Override
    public Image setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Image setUploader(long uploader) {
        this.uploader = uploader;
        return this;
    }
    
    @Override
    public Image setTitle(String title) {
        this.title = title;
        return this;
    }
    
    @Override
    public Image setDescription(String description) {
        this.description = description;
        return this;
    }
    
    @Override
    public Image setImgData(String imgData) {
        this.imgData = imgData;
        return this;
    }
    
    @Override
    public Image setUploaded(Timestamp uploaded) {
        this.uploaded = uploaded;
        return this;
    }
    
    @Override
    public User findUploader(Manager<User> foreignManager) {
        return foreignManager.stream().filter(User.ID.equal(getUploader())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "          + Objects.toString(getId()));
        sj.add("uploader = "    + Objects.toString(getUploader()));
        sj.add("title = "       + Objects.toString(getTitle()));
        sj.add("description = " + Objects.toString(getDescription()));
        sj.add("imgData = "     + Objects.toString(getImgData()));
        sj.add("uploaded = "    + Objects.toString(getUploaded()));
        return "ImageImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Image)) { return false; }
        final Image thatImage = (Image)that;
        if (this.getId() != thatImage.getId()) { return false; }
        if (this.getUploader() != thatImage.getUploader()) { return false; }
        if (!Objects.equals(this.getTitle(), thatImage.getTitle())) { return false; }
        if (!Objects.equals(this.getDescription(), thatImage.getDescription())) { return false; }
        if (!Objects.equals(this.getImgData(), thatImage.getImgData())) { return false; }
        if (!Objects.equals(this.getUploaded(), thatImage.getUploaded())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Long.hashCode(getUploader());
        hash = 31 * hash + Objects.hashCode(getTitle());
        hash = 31 * hash + Objects.hashCode(getDescription());
        hash = 31 * hash + Objects.hashCode(getImgData());
        hash = 31 * hash + Objects.hashCode(getUploaded());
        return hash;
    }
}