package com.github.pyknic.sauna.booking.generated;

import com.github.pyknic.sauna.booking.Booking;
import com.github.pyknic.sauna.booking.BookingImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.github.pyknic.sauna.booking.Booking} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedBookingSqlAdapter implements SqlAdapter<Booking> {
    
    private final TableIdentifier<Booking> tableIdentifier;
    
    protected GeneratedBookingSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("db0", "sauna", "booking");
    }
    
    protected Booking apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(         resultSet.getLong(1 + offset))
            .setBookingId(  resultSet.getLong(2 + offset))
            .setEventType(  resultSet.getString(3 + offset))
            .setTenant(     getInt(resultSet, 4 + offset))
            .setSauna(      getInt(resultSet, 5 + offset))
            .setBookedFrom( resultSet.getDate(6 + offset))
            .setBookedTo(   resultSet.getDate(7 + offset))
            ;
    }
    
    protected BookingImpl createEntity() {
        return new BookingImpl();
    }
    
    @Override
    public TableIdentifier<Booking> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Booking> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Booking> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}